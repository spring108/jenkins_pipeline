pipeline {
  agent {
    docker {
      // need to install two plugins: "Docker" & "Docker Pipeline"
      // need echo '{"insecure-registries" : ["nexus-srv:8123"]}' > /etc/docker/daemon.json
      // need service docker restart
      //
      alwaysPull true
      image 'nexus-srv:8123/build_environment:v1.1.0'
      registryUrl 'http://nexus-srv:8123'
      registryCredentialsId 'nexus_admin'    // must be in Jenkins

      //args '-v /var/run/docker.sock:/var/run/docker.sock'
      args '--privileged --user="root" -v /etc/docker/daemon.json:/etc/docker/daemon.json -v /etc/hosts:/etc/hosts -v /var/run/docker.sock:/var/run/docker.sock -v /root/.ssh/id_rsa.pub:/root/.ssh/id_rsa.pub'
      }
    }

  parameters {
    string(name: "version", defaultValue: "v2.0.0", trim: true, description: "Введите версию нового docker-image")
    }

  stages {

    stage('Copy PROJECT source from GitHub') {
      steps {
        //git(url: 'https://github.com/boxfuse/boxfuse-sample-java-war-hello.git', branch: 'master', poll: true)
        sh 'echo "******* BEGIN: Copy PROJECT source from GitHub *******"'
        sh 'cd /etc && git clone https://github.com/boxfuse/boxfuse-sample-java-war-hello.git'
        sh 'echo "******* END: Copy PROJECT source from GitHub *******"'
        }
      }
    stage('Build war-file') {
      steps {
        sh 'echo "******* BEGIN: Build war-file *******"'
        sh 'cd /etc/boxfuse-sample-java-war-hello && mvn package'
        sh 'echo "******* END: Build war-file *******"'
        }
      }



    stage('Copy FILES from GitHub') {
      steps {
        //git(url: 'https://github.com/spring108/jenkins_pipeline.git', branch: 'master', poll: true, credentialsId: 'git')
        sh 'echo "******* BEGIN: Copy FILES from GitHub *******"'
        sh 'cd /etc && git clone https://github.com/spring108/jenkins_pipeline.git'
        sh 'echo "******* END: Copy FILES from GitHub *******"'
        }
      }
    stage('Copy artifact (with rename) nearly Dockerfile') {
      steps {
        sh 'echo "******* BEGIN: Copy artifact (with rename) nearly Dockerfile *******"'
        sh 'cp /etc/boxfuse-sample-java-war-hello/target/hello-1.0.war /etc/jenkins_pipeline/jenkins/hello.war'
        sh 'echo "******* END: Copy artifact (with rename) nearly Dockerfile *******"'
        }
      }


    stage('docker login to Nexus registry') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'nexus_admin', passwordVariable: 'NEXUSPASS', usernameVariable: 'NEXUSUSERNAME')]) {
          sh 'echo "******* BEGIN: docker login to Nexus registry *******"'
          sh 'docker login nexus-srv:8123 --username $NEXUSUSERNAME --password $NEXUSPASS'
          sh 'echo "******* END: docker login to Nexus registry *******"'
          }
        }
      }
    stage('Make new docker image by Dockerfile and hello.war, TAG it and PUSH to Nexus registry') {
      steps {
        sh 'echo "******* BEGIN: Make new docker image by Dockerfile and hello.war, TAG it and PUSH to Nexus registry *******"'
        sh 'echo "******* New Docker-Image Artifact Vergion is $version"'
        sh 'cd /etc/jenkins_pipeline/jenkins && docker build -t myweb2:$version .'
        sh 'docker tag myweb2:$version nexus-srv:8123/myweb2:$version'
        sh 'docker push nexus-srv:8123/myweb2:$version'
        sh 'echo "******* END: Make new docker image by Dockerfile and hello.war, TAG it and PUSH to Nexus registry *******"'
        }
      }

    stage('on prod-srv: PULL & RUN docker image') {
      steps {
        sh 'echo "******* BEGIN: on prod-srv: PULL & RUN docker image *******"'
        sh 'echo "******* jenkins now running by user = " && whoami'
        sh 'ssh root@prod-srv "docker pull nexus-srv:8123/myweb2:$version"'
        sh 'ssh root@prod-srv "docker run -d -p 8080:8080 nexus-srv:8123/myweb2:$version"'
        sh 'echo "******* END: on prod-srv: PULL & RUN docker image *******"'
        }
      }



    }
  }